import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import SEO from '../components/SEO';

const templates = [
  { id: 1, name: 'Hi·ªán ƒë·∫°i', image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=400&h=200&fit=crop', color: '#2563eb', bg: 'from-blue-50 to-blue-100', style: 'modern', font: 'font-sans', radius: 'rounded-2xl', shadow: 'shadow-xl', hover: 'hover:scale-105', transition: 'transition-all duration-300' },
  { id: 2, name: 'T·ªëi gi·∫£n', image: 'https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=400&h=200&fit=crop', color: '#22223b', bg: 'from-gray-50 to-gray-100', style: 'minimal', font: 'font-serif', radius: 'rounded-lg', shadow: 'shadow', hover: 'hover:shadow-2xl', transition: 'transition-all duration-200' },
  { id: 3, name: 'S√°ng t·∫°o', image: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=400&h=200&fit=crop', color: '#f59e42', bg: 'from-yellow-50 to-orange-100', style: 'creative', font: 'font-mono', radius: 'rounded-3xl', shadow: 'shadow-2xl', hover: 'hover:rotate-1 hover:scale-105', transition: 'transition-all duration-500' },
  { id: 4, name: 'Beauty Spa', image: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=400&h=200&fit=crop', color: '#a78bfa', bg: 'from-pink-50 to-purple-100', style: 'spa', font: 'font-serif', radius: 'rounded-full', shadow: 'shadow-lg', hover: 'hover:scale-105', transition: 'transition-all duration-300' },
  { id: 5, name: 'Th·ªùi trang n·ªØ', image: 'https://images.unsplash.com/photo-1512436991641-6745cdb1723f?w=400&h=200&fit=crop', color: '#f472b6', bg: 'from-pink-50 to-pink-100', style: 'fashion', font: 'font-sans', radius: 'rounded-2xl', shadow: 'shadow-xl', hover: 'hover:scale-110', transition: 'transition-all duration-300' },
  { id: 6, name: 'M·∫π & B√©', image: 'https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?w=400&h=200&fit=crop', color: '#f9a8d4', bg: 'from-pink-50 to-yellow-50', style: 'mom', font: 'font-serif', radius: 'rounded-3xl', shadow: 'shadow-lg', hover: 'hover:scale-105', transition: 'transition-all duration-300' }
];

const colors = [
  { name: 'Xanh d∆∞∆°ng', value: '#2563eb' },
  { name: 'T√≠m pastel', value: '#a78bfa' },
  { name: 'H·ªìng nh·∫°t', value: '#f472b6' },
  { name: 'Xanh l√°', value: '#22c55e' },
  { name: 'Cam', value: '#fb923c' },
  { name: 'H·ªìng baby', value: '#f9a8d4' },
  { name: 'T√≠m lavender', value: '#c4b5fd' },
  { name: 'V√†ng kem', value: '#fef9c3' },
  { name: 'N√¢u s·ªØa', value: '#f5e0c3' },
  { name: 'Tr·∫Øng s·ªØa', value: '#fdf6f0' }
];

// C√°c block ƒë·∫∑c tr∆∞ng ri√™ng cho t·ª´ng template
const templateSpecialBlocks = [
  { id: 'modern-feature', name: 'T√≠nh nƒÉng n·ªïi b·∫≠t (Hi·ªán ƒë·∫°i)', icon: '‚ú®', template: 'modern' },
  { id: 'minimal-quote', name: 'Tr√≠ch d·∫´n (T·ªëi gi·∫£n)', icon: '‚ùù', template: 'minimal' },
  { id: 'creative-showcase', name: 'Showcase s√°ng t·∫°o', icon: 'üé®', template: 'creative' },
  { id: 'spa-promotion', name: '∆Øu ƒë√£i Spa', icon: 'üíÜ‚Äç‚ôÄÔ∏è', template: 'spa' },
  { id: 'fashion-lookbook', name: 'Lookbook th·ªùi trang', icon: 'üëó', template: 'fashion' },
  { id: 'mom-tips', name: 'M·∫πo cho m·∫π & b√©', icon: 'üë∂', template: 'mom' },
];

const LOCAL_KEY = 'zunaweb_builder_blocks';

const WebsiteBuilder = () => {
  const [selectedTemplate, setSelectedTemplate] = useState(templates[0].id);
  const [selectedColor, setSelectedColor] = useState(colors[0].value);
  const [siteInfo, setSiteInfo] = useState({ name: '', slogan: '', description: '', field: '' });
  const [blockOrder, setBlockOrder] = useState(['header', 'about', 'services', 'gallery', 'testimonial', 'team', 'pricing', 'faq', 'contact', 'cta']);
  const [showPreview, setShowPreview] = useState(false);
  const [blockContents, setBlockContents] = useState({});
  const [editingBlock, setEditingBlock] = useState(null);
  const [editValue, setEditValue] = useState({});
  const navigate = useNavigate();

  // Load blockOrder from localStorage
  useEffect(() => {
    const saved = localStorage.getItem(LOCAL_KEY);
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        if (Array.isArray(parsed) && parsed.length > 0) setBlockOrder(parsed);
      } catch {
        // Kh√¥ng l√†m g√¨ n·∫øu l·ªói parse
      }
    }
  }, []);
  // Save blockOrder to localStorage
  useEffect(() => {
    localStorage.setItem(LOCAL_KEY, JSON.stringify(blockOrder));
  }, [blockOrder]);

  const handleDragStart = (e, idx) => {
    e.dataTransfer.setData('blockIdx', idx);
  };
  const handleDrop = (e, idx) => {
    const fromIdx = +e.dataTransfer.getData('blockIdx');
    if (fromIdx === idx) return;
    const newOrder = [...blockOrder];
    const [moved] = newOrder.splice(fromIdx, 1);
    newOrder.splice(idx, 0, moved);
    setBlockOrder(newOrder);
  };
  const handleDragOver = (e) => e.preventDefault();

  const handleInput = (e) => {
    setSiteInfo({ ...siteInfo, [e.target.name]: e.target.value });
  };

  const handlePreview = (e) => {
    e.preventDefault();
    setShowPreview(true);
  };

  const handleSendRequest = () => {
    navigate('/contact');
  };

  // Th√™m block
  const handleAddBlock = (blockId) => {
    if (!blockOrder.includes(blockId)) {
      setBlockOrder([...blockOrder, blockId]);
    }
  };
  // X√≥a block
  const handleRemoveBlock = (blockId) => {
    setBlockOrder(blockOrder.filter((id) => id !== blockId));
  };

  // H√†m m·ªü modal ch·ªânh s·ª≠a
  const handleEditBlock = (blockId) => {
    setEditingBlock(blockId);
    setEditValue(blockContents[blockId] || {});
  };
  // H√†m l∆∞u n·ªôi dung block
  const handleSaveBlock = () => {
    setBlockContents({ ...blockContents, [editingBlock]: editValue });
    setEditingBlock(null);
  };
  // H√†m ƒë√≥ng modal
  const handleCloseEdit = () => setEditingBlock(null);

  // H√†m render form ch·ªânh s·ª≠a cho t·ª´ng block
  const renderEditForm = (blockId) => {
    switch (blockId) {
      case 'header':
        return (
          <>
            <label className="block font-semibold mb-1">T√™n website</label>
            <input className="w-full border rounded px-3 py-2 mb-2" value={editValue.name || ''} onChange={e => setEditValue({ ...editValue, name: e.target.value })} />
            <label className="block font-semibold mb-1">Slogan</label>
            <input className="w-full border rounded px-3 py-2" value={editValue.slogan || ''} onChange={e => setEditValue({ ...editValue, slogan: e.target.value })} />
          </>
        );
      case 'about':
        return (
          <>
            <label className="block font-semibold mb-1">Gi·ªõi thi·ªáu</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.text || ''} onChange={e => setEditValue({ ...editValue, text: e.target.value })} />
          </>
        );
      case 'services':
        return (
          <>
            <label className="block font-semibold mb-1">D·ªãch v·ª• n·ªïi b·∫≠t (m·ªói d√≤ng 1 d·ªãch v·ª•)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="D·ªãch v·ª• 1\nD·ªãch v·ª• 2\nD·ªãch v·ª• 3" />
          </>
        );
      case 'blog':
        return (
          <>
            <label className="block font-semibold mb-1">Ti√™u ƒë·ªÅ blog (m·ªói d√≤ng 1 b√†i)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="Blog 1\nBlog 2" />
          </>
        );
      case 'testimonial':
        return (
          <>
            <label className="block font-semibold mb-1">Nh·∫≠n x√©t kh√°ch h√†ng (m·ªói d√≤ng 1 nh·∫≠n x√©t)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="T√™n - Nh·∫≠n x√©t" />
          </>
        );
      case 'team':
        return (
          <>
            <label className="block font-semibold mb-1">Th√†nh vi√™n (m·ªói d√≤ng 1 ng∆∞·ªùi)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="T√™n - Vai tr√≤" />
          </>
        );
      case 'pricing':
        return (
          <>
            <label className="block font-semibold mb-1">B·∫£ng gi√° (m·ªói d√≤ng 1 g√≥i)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="G√≥i 1: Gi√°\nG√≥i 2: Gi√°" />
          </>
        );
      case 'faq':
        return (
          <>
            <label className="block font-semibold mb-1">C√¢u h·ªèi th∆∞·ªùng g·∫∑p (m·ªói d√≤ng 1 c√¢u)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="C√¢u h·ªèi 1\nC√¢u h·ªèi 2" />
          </>
        );
      case 'cta':
        return (
          <>
            <label className="block font-semibold mb-1">Ti√™u ƒë·ªÅ k√™u g·ªçi</label>
            <input className="w-full border rounded px-3 py-2 mb-2" value={editValue.title || ''} onChange={e => setEditValue({ ...editValue, title: e.target.value })} />
            <label className="block font-semibold mb-1">N·ªôi dung</label>
            <input className="w-full border rounded px-3 py-2" value={editValue.text || ''} onChange={e => setEditValue({ ...editValue, text: e.target.value })} />
          </>
        );
      case 'contact':
        return (
          <>
            <label className="block font-semibold mb-1">H∆∞·ªõng d·∫´n li√™n h·ªá</label>
            <input className="w-full border rounded px-3 py-2" value={editValue.text || ''} onChange={e => setEditValue({ ...editValue, text: e.target.value })} />
          </>
        );
      case 'navigation':
        return (
          <>
            <label className="block font-semibold mb-1">T√™n website</label>
            <input className="w-full border rounded px-3 py-2 mb-2" value={editValue.name || ''} onChange={e => setEditValue({ ...editValue, name: e.target.value })} />
            <label className="block font-semibold mb-1">Menu (c√°ch nhau b·ªüi d·∫•u ph·∫©y)</label>
            <input className="w-full border rounded px-3 py-2" value={editValue.menu || ''} onChange={e => setEditValue({ ...editValue, menu: e.target.value })} placeholder="Gi·ªõi thi·ªáu, D·ªãch v·ª•, H√¨nh ·∫£nh, Li√™n h·ªá" />
          </>
        );
      case 'footer':
        return (
          <>
            <label className="block font-semibold mb-1">B·∫£n quy·ªÅn</label>
            <input className="w-full border rounded px-3 py-2 mb-2" value={editValue.copyright || ''} onChange={e => setEditValue({ ...editValue, copyright: e.target.value })} />
            <label className="block font-semibold mb-1">Credit</label>
            <input className="w-full border rounded px-3 py-2" value={editValue.credit || ''} onChange={e => setEditValue({ ...editValue, credit: e.target.value })} />
          </>
        );
      case 'social':
        return (
          <>
            <label className="block font-semibold mb-1">Li√™n k·∫øt m·∫°ng x√£ h·ªôi (m·ªói d√≤ng 1 link)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="Facebook: https://facebook.com/...\nInstagram: https://instagram.com/...\nYouTube: https://youtube.com/..." />
          </>
        );
      case 'newsletter':
        return (
          <>
            <label className="block font-semibold mb-1">Ti√™u ƒë·ªÅ ƒëƒÉng k√Ω</label>
            <input className="w-full border rounded px-3 py-2 mb-2" value={editValue.title || ''} onChange={e => setEditValue({ ...editValue, title: e.target.value })} />
            <label className="block font-semibold mb-1">M√¥ t·∫£</label>
            <input className="w-full border rounded px-3 py-2" value={editValue.text || ''} onChange={e => setEditValue({ ...editValue, text: e.target.value })} />
          </>
        );
      case 'map':
        return (
          <>
            <label className="block font-semibold mb-1">ƒê·ªãa ch·ªâ</label>
            <input className="w-full border rounded px-3 py-2 mb-2" value={editValue.address || ''} onChange={e => setEditValue({ ...editValue, address: e.target.value })} />
            <label className="block font-semibold mb-1">M√¥ t·∫£</label>
            <input className="w-full border rounded px-3 py-2" value={editValue.text || ''} onChange={e => setEditValue({ ...editValue, text: e.target.value })} />
          </>
        );
      case 'statistics':
        return (
          <>
            <label className="block font-semibold mb-1">Th·ªëng k√™ (m·ªói d√≤ng 1 th·ªëng k√™)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="1000+ Kh√°ch h√†ng\n50+ D·ª± √°n\n5+ NƒÉm kinh nghi·ªám\n99% H√†i l√≤ng" />
          </>
        );
      case 'awards':
        return (
          <>
            <label className="block font-semibold mb-1">Gi·∫£i th∆∞·ªüng (m·ªói d√≤ng 1 gi·∫£i)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="Gi·∫£i th∆∞·ªüng 1 - 2023\nGi·∫£i th∆∞·ªüng 2 - 2022" />
          </>
        );
      case 'events':
        return (
          <>
            <label className="block font-semibold mb-1">S·ª± ki·ªán (m·ªói d√≤ng 1 s·ª± ki·ªán)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="S·ª± ki·ªán 1 - Ng√†y/Th√°ng\nS·ª± ki·ªán 2 - Ng√†y/Th√°ng" />
          </>
        );
      case 'portfolio':
        return (
          <>
            <label className="block font-semibold mb-1">T√°c ph·∫©m (m·ªói d√≤ng 1 t√°c ph·∫©m)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="T√°c ph·∫©m 1 - M√¥ t·∫£\nT√°c ph·∫©m 2 - M√¥ t·∫£" />
          </>
        );
      case 'reviews':
        return (
          <>
            <label className="block font-semibold mb-1">ƒê√°nh gi√° (m·ªói d√≤ng 1 ƒë√°nh gi√°)</label>
            <textarea className="w-full border rounded px-3 py-2" rows={4} value={editValue.list || ''} onChange={e => setEditValue({ ...editValue, list: e.target.value })} placeholder="T√™n - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - Nh·∫≠n x√©t\nT√™n - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - Nh·∫≠n x√©t" />
          </>
        );
      default:
        return <div>Ch∆∞a h·ªó tr·ª£ ch·ªânh s·ª≠a block n√†y.</div>;
    }
  };

  const templateObj = templates.find(t => t.id === selectedTemplate) || templates[0];
  const styleType = templateObj.style;
  const fontClass = templateObj.font;
  const radiusClass = templateObj.radius;
  const shadowClass = templateObj.shadow;
  const hoverClass = templateObj.hover;
  const transitionClass = templateObj.transition;

  // Lu√¥n d√πng gradient c·ªßa template cho preview, kh√¥ng d√πng m√†u ch·ªß ƒë·∫°o
  const previewBgGradient = templateObj.bg ? `bg-gradient-to-br ${templateObj.bg}` : 'bg-white';
  const previewBgStyle = undefined;

  // Khai b√°o blocks b√™n trong component ƒë·ªÉ d√πng selectedTemplate
  const blocks = [
    { id: 'header', name: 'Header', icon: 'üñºÔ∏è' },
    { id: 'about', name: 'Gi·ªõi thi·ªáu', icon: '‚ÑπÔ∏è' },
    { id: 'services', name: 'D·ªãch v·ª•', icon: 'üíº' },
    { id: 'gallery', name: 'H√¨nh ·∫£nh', icon: 'üñºÔ∏è' },
    { id: 'blog', name: 'Blog', icon: 'üìù' },
    { id: 'video', name: 'Video', icon: 'üé¨' },
    { id: 'product', name: 'S·∫£n ph·∫©m n·ªïi b·∫≠t', icon: 'üõçÔ∏è' },
    { id: 'partner', name: 'ƒê·ªëi t√°c', icon: 'ü§ù' },
    { id: 'contact', name: 'Li√™n h·ªá', icon: '‚òéÔ∏è' },
    { id: 'testimonial', name: 'Kh√°ch h√†ng n√≥i g√¨', icon: 'üí¨' },
    { id: 'team', name: 'ƒê·ªôi ng≈©', icon: 'üë©‚Äçüíº' },
    { id: 'pricing', name: 'B·∫£ng gi√°', icon: 'üí∞' },
    { id: 'faq', name: 'FAQ', icon: '‚ùì' },
    { id: 'cta', name: 'K√™u g·ªçi h√†nh ƒë·ªông', icon: 'üöÄ' },
    { id: 'navigation', name: 'Thanh ƒëi·ªÅu h∆∞·ªõng', icon: 'üß≠' },
    { id: 'footer', name: 'Ch√¢n trang', icon: 'üîª' },
    // Th√™m block ƒë·∫∑c tr∆∞ng cho template hi·ªán t·∫°i
    ...templateSpecialBlocks.filter(b => b.template === (templates.find(t => t.id === selectedTemplate)?.style)),
    { id: 'social', name: 'M·∫°ng x√£ h·ªôi', icon: 'üì±' },
    { id: 'newsletter', name: 'ƒêƒÉng k√Ω nh·∫≠n tin', icon: 'üìß' },
    { id: 'map', name: 'B·∫£n ƒë·ªì', icon: 'üó∫Ô∏è' },
    { id: 'statistics', name: 'Th·ªëng k√™', icon: 'üìä' },
    { id: 'awards', name: 'Gi·∫£i th∆∞·ªüng', icon: 'üèÜ' },
    { id: 'events', name: 'S·ª± ki·ªán', icon: 'üìÖ' },
    { id: 'portfolio', name: 'T√°c ph·∫©m', icon: 'üé®' },
    { id: 'reviews', name: 'ƒê√°nh gi√°', icon: '‚≠ê' },
  ];

  // Danh s√°ch block c√≥ th·ªÉ th√™m
  const availableBlocks = blocks.filter(b => !blockOrder.includes(b.id));

  // Ph√¢n lo·∫°i block theo template ph√π h·ª£p
  const blockTemplateMapping = {
    'modern': ['header', 'about', 'services', 'gallery', 'blog', 'video', 'team', 'pricing', 'faq', 'cta', 'contact', 'navigation', 'footer', 'modern-feature'],
    'minimal': ['header', 'about', 'services', 'gallery', 'blog', 'team', 'pricing', 'faq', 'cta', 'contact', 'navigation', 'footer', 'minimal-quote'],
    'creative': ['header', 'about', 'services', 'gallery', 'blog', 'video', 'product', 'team', 'pricing', 'faq', 'cta', 'contact', 'navigation', 'footer', 'creative-showcase'],
    'spa': ['header', 'about', 'services', 'gallery', 'blog', 'testimonial', 'team', 'pricing', 'faq', 'cta', 'contact', 'navigation', 'footer', 'spa-promotion'],
    'fashion': ['header', 'about', 'services', 'gallery', 'blog', 'video', 'product', 'testimonial', 'team', 'pricing', 'faq', 'cta', 'contact', 'navigation', 'footer', 'fashion-lookbook'],
    'mom': ['header', 'about', 'services', 'gallery', 'blog', 'product', 'testimonial', 'team', 'pricing', 'faq', 'cta', 'contact', 'navigation', 'footer', 'mom-tips']
  };

  const handleRandom = () => {
    // Implement the logic to randomly select a block from availableBlocks
    // For now, we'll just select the first block in the availableBlocks array
    if (availableBlocks.length > 0) {
      handleAddBlock(availableBlocks[0].id);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-white to-purple-50 py-20">
      <SEO title="Thi·∫øt k·∫ø Website t·ª± ƒë·ªông - ZunaWeb" description="T·ª± t·∫°o website ƒë∆°n gi·∫£n, ch·ªçn m·∫´u, m√†u s·∫Øc, k√©o th·∫£ block v√† xem preview tr·ª±c ti·∫øp." />
      <div className="max-w-4xl mx-auto px-4 mb-12 text-center mt-8">
        <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4 font-display">Thi·∫øt k·∫ø Website t·ª± ƒë·ªông</h1>
        <p className="text-xl text-gray-600 mb-8">Ch·ªçn m·∫´u, m√†u s·∫Øc n·ªØ t√≠nh, nh·∫≠p th√¥ng tin v√† s·∫Øp x·∫øp c√°c ph·∫ßn ‚Äì xem preview tr·ª±c ti·∫øp website c·ªßa b·∫°n!</p>
      </div>
      <div className="max-w-5xl mx-auto grid md:grid-cols-2 gap-12 mb-16">
        {/* Form */}
        <form onSubmit={handlePreview} className="space-y-8">
          {/* Ch·ªçn template */}
          <div>
            <label className="block font-semibold mb-2 text-gray-900">Ch·ªçn m·∫´u giao di·ªán</label>
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm text-gray-600">G·ª£i √Ω: {templateObj.name} ph√π h·ª£p v·ªõi {blockTemplateMapping[templateObj.style]?.length || 0} th√†nh ph·∫ßn</span>
              <button
                type="button"
                onClick={handleRandom}
                className="px-4 py-2 bg-gradient-to-r from-pink-400 to-purple-400 text-white rounded-lg hover:from-pink-500 hover:to-purple-500 transition-all text-sm font-medium"
              >
                üé≤ Random
              </button>
            </div>
            <div className="flex gap-4 flex-wrap">
              {templates.map((tpl) => (
                <button
                  type="button"
                  key={tpl.id}
                  className={`rounded-xl border-2 p-1 transition-all ${selectedTemplate === tpl.id ? 'border-pink-500 ring-2 ring-pink-200' : 'border-gray-200'}`}
                  onClick={() => setSelectedTemplate(tpl.id)}
                >
                  <img src={tpl.image} alt={tpl.name} className="w-28 h-14 object-cover rounded-lg" />
                  <div className="text-sm mt-1 font-medium text-gray-700">{tpl.name}</div>
                </button>
              ))}
            </div>
          </div>
          {/* Ch·ªçn m√†u */}
          <div>
            <label className="block font-semibold mb-2 text-gray-900">Ch·ªçn m√†u ch·ªß ƒë·∫°o</label>
            <div className="flex gap-3 flex-wrap">
              {colors.map((color) => (
                <button
                  type="button"
                  key={color.value}
                  className={`w-8 h-8 rounded-full border-2 ${selectedColor === color.value ? 'border-pink-500 ring-2 ring-pink-200' : 'border-gray-200'}`}
                  style={{ background: color.value }}
                  onClick={() => setSelectedColor(color.value)}
                  title={color.name}
                />
              ))}
            </div>
          </div>
          {/* Nh·∫≠p th√¥ng tin */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block font-semibold mb-1 text-gray-900">T√™n website</label>
              <input name="name" value={siteInfo.name} onChange={handleInput} className="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="VD: ZunaWeb" />
            </div>
            <div>
              <label className="block font-semibold mb-1 text-gray-900">Slogan</label>
              <input name="slogan" value={siteInfo.slogan} onChange={handleInput} className="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="VD: Website cho m·ªçi ng∆∞·ªùi" />
            </div>
            <div className="md:col-span-2">
              <label className="block font-semibold mb-1 text-gray-900">M√¥ t·∫£</label>
              <textarea name="description" value={siteInfo.description} onChange={handleInput} className="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="Gi·ªõi thi·ªáu ng·∫Øn v·ªÅ website..." />
            </div>
            <div className="md:col-span-2">
              <label className="block font-semibold mb-1 text-gray-900">Lƒ©nh v·ª±c</label>
              <input name="field" value={siteInfo.field} onChange={handleInput} className="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="VD: Thi·∫øt k·∫ø web, Spa, Th·ªùi trang n·ªØ..." />
            </div>
          </div>
          {/* K√©o th·∫£ block */}
          <div>
            <label className="block font-semibold mb-2 text-gray-900">S·∫Øp x·∫øp c√°c ph·∫ßn (k√©o th·∫£)</label>
            <ul className="space-y-2 mb-2">
              {blockOrder.map((blockId, idx) => {
                const block = blocks.find((b) => b.id === blockId);
                return (
                  <li
                    key={blockId}
                    className="flex items-center gap-3 bg-pink-50 rounded-lg px-4 py-2 cursor-move border border-pink-200"
                    draggable
                    onDragStart={(e) => handleDragStart(e, idx)}
                    onDrop={(e) => handleDrop(e, idx)}
                    onDragOver={handleDragOver}
                  >
                    <span className="text-xl">{block.icon}</span>
                    <span className="font-medium text-gray-800 flex-1">{block.name}</span>
                    <button type="button" className="text-pink-500 hover:text-pink-700 text-lg ml-2" onClick={() => handleRemoveBlock(blockId)} title="X√≥a"><span aria-hidden>√ó</span></button>
                  </li>
                );
              })}
            </ul>
            {/* Th√™m block m·ªõi - ph√¢n lo·∫°i theo template */}
            {availableBlocks.length > 0 && (
              <div className="mt-4">
                <h4 className="font-semibold mb-2 text-gray-700">Th√™m th√†nh ph·∫ßn:</h4>
                <div className="space-y-3">
                  {/* Block ph√π h·ª£p v·ªõi template hi·ªán t·∫°i */}
                  {(() => {
                    const suitableBlocks = availableBlocks.filter(block => 
                      blockTemplateMapping[templateObj.style]?.includes(block.id)
                    );
                    if (suitableBlocks.length > 0) {
                      return (
                        <div>
                          <div className="text-sm font-medium text-green-600 mb-1">‚ú® Ph√π h·ª£p v·ªõi {templateObj.name}:</div>
                          <div className="flex flex-wrap gap-2">
                            {suitableBlocks.map((block) => (
                              <button
                                key={block.id}
                                type="button"
                                className="px-3 py-1 rounded-lg bg-green-100 text-green-700 hover:bg-green-200 text-sm font-medium border border-green-200"
                                onClick={() => handleAddBlock(block.id)}
                              >
                                {block.icon} {block.name}
                              </button>
                            ))}
                          </div>
                        </div>
                      );
                    }
                    return null;
                  })()}
                  
                  {/* Block kh√°c */}
                  {(() => {
                    const otherBlocks = availableBlocks.filter(block => 
                      !blockTemplateMapping[templateObj.style]?.includes(block.id)
                    );
                    if (otherBlocks.length > 0) {
                      return (
                        <div>
                          <div className="text-sm font-medium text-gray-600 mb-1">üìã Th√†nh ph·∫ßn kh√°c:</div>
                          <div className="flex flex-wrap gap-2">
                            {otherBlocks.map((block) => (
                              <button
                                key={block.id}
                                type="button"
                                className="px-3 py-1 rounded-lg bg-gray-100 text-gray-700 hover:bg-gray-200 text-sm font-medium border border-gray-200"
                                onClick={() => handleAddBlock(block.id)}
                              >
                                {block.icon} {block.name}
                              </button>
                            ))}
                          </div>
                        </div>
                      );
                    }
                    return null;
                  })()}
                </div>
              </div>
            )}
          </div>
          <button type="submit" className="btn-primary w-full py-3 text-lg bg-pink-500 hover:bg-pink-600 border-0">Xem preview website</button>
        </form>
        {/* Preview tr·ª±c ti·∫øp */}
        <div className={`rounded-2xl shadow-lg p-6 min-h-[500px] flex flex-col ${previewBgGradient}`} style={previewBgStyle}>
          <div className="mb-4 flex items-center gap-2">
            <span className="text-pink-600 font-bold">Preview Website</span>
          </div>
          <div className={`flex-1 border border-dashed rounded-xl p-4 overflow-auto ${previewBgGradient}`} style={previewBgStyle}>
            {blockOrder.map((blockId) => (
              <div key={blockId} className="mb-6 last:mb-0" onDoubleClick={() => handleEditBlock(blockId)} style={{ cursor: 'pointer' }}>
                {renderBlock(
                  blockId,
                  blockContents[blockId],
                  { styleType, fontClass, radiusClass, shadowClass, hoverClass, transitionClass, templateObj, siteInfo, selectedColor }
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* CTA section */}
      <div className="max-w-3xl mx-auto text-center mt-16">
        <h2 className="text-2xl font-bold mb-4 text-gray-900">B·∫°n h√†i l√≤ng v·ªõi b·∫£n demo?</h2>
        <p className="text-gray-600 mb-6">G·ª≠i y√™u c·∫ßu ƒë·ªÉ ƒë·ªôi ng≈© ZunaWeb t∆∞ v·∫•n v√† tri·ªÉn khai website th·ª±c t·∫ø cho b·∫°n!</p>
        <button className="btn-primary px-8 py-3 text-lg bg-pink-500 hover:bg-pink-600 border-0" onClick={handleSendRequest}>G·ª≠i y√™u c·∫ßu t∆∞ v·∫•n</button>
      </div>
      {/* Preview Modal */}
      {showPreview && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
          <div className={`rounded-2xl shadow-2xl max-w-2xl w-full p-6 relative animate-fadeIn ${previewBgGradient}`} style={previewBgStyle}>
            <button className="absolute top-3 right-3 text-gray-400 hover:text-pink-600 text-2xl font-bold" onClick={() => setShowPreview(false)}>&times;</button>
            <div className="mb-4 flex items-center gap-2">
              <span className="text-pink-600 font-bold">Preview Website</span>
            </div>
            <div className={`border border-dashed rounded-xl p-4 overflow-auto max-h-[70vh] ${previewBgGradient}`} style={previewBgStyle}>
              {blockOrder.map((blockId) => (
                <div key={blockId} className="mb-6 last:mb-0" onDoubleClick={() => handleEditBlock(blockId)} style={{ cursor: 'pointer' }}>
                  {renderBlock(
                    blockId,
                    blockContents[blockId],
                    { styleType, fontClass, radiusClass, shadowClass, hoverClass, transitionClass, templateObj, siteInfo, selectedColor }
                  )}
                </div>
              ))}
            </div>
            <div className="mt-6 text-center">
              <button className="btn-primary px-8 py-3 text-lg bg-pink-500 hover:bg-pink-600 border-0" onClick={handleSendRequest}>
                G·ª≠i y√™u c·∫ßu t∆∞ v·∫•n
              </button>
            </div>
          </div>
        </div>
      )}
      {/* Modal ch·ªânh s·ª≠a block */}
      {editingBlock && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
          <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6 relative animate-fadeIn">
            <button className="absolute top-3 right-3 text-gray-400 hover:text-pink-600 text-2xl font-bold" onClick={handleCloseEdit}>&times;</button>
            <h2 className="text-xl font-bold mb-4">Ch·ªânh s·ª≠a n·ªôi dung</h2>
            {renderEditForm(editingBlock)}
            <div className="mt-6 text-right">
              <button className="btn-primary px-6 py-2 bg-pink-500 hover:bg-pink-600 text-white rounded" onClick={handleSaveBlock}>L∆∞u</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const renderBlock = (blockId, content = {}, styleVars = {}) => {
  const { styleType, fontClass, radiusClass, shadowClass, hoverClass, transitionClass, templateObj, siteInfo, selectedColor } = styleVars;
  // S·ª≠ d·ª•ng selectedColor n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng m√†u c·ªßa template
  const mainColor = selectedColor || templateObj.color;
  switch (blockId) {
    case 'header':
      return (
        <div className={`py-8 text-center ${radiusClass} mb-2 ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} ${styleType === 'minimal' ? 'bg-white border' : ''}`}
          style={{ background: styleType === 'minimal' ? '#fff' : mainColor, color: styleType === 'minimal' ? '#22223b' : '#fff' }}>
          <h1 className={`text-4xl font-bold mb-2 ${styleType === 'creative' ? 'italic' : ''} ${fontClass}`}>{content.name || siteInfo.name || 'T√™n website'}</h1>
          <p className={`text-xl mb-2 ${fontClass}`}>{content.slogan || siteInfo.slogan || 'Slogan c·ªßa b·∫°n'}</p>
        </div>
      );
    case 'about':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 ${fontClass}`}>Gi·ªõi thi·ªáu</h2>
          <p className={`text-gray-700 ${fontClass}`}>{content.text || siteInfo.description || 'M√¥ t·∫£ ng·∫Øn v·ªÅ website, d·ªãch v·ª• ho·∫∑c s·∫£n ph·∫©m c·ªßa b·∫°n.'}</p>
        </div>
      );
    case 'services':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-gray-50`}>
          <h2 className={`text-2xl font-bold mb-4 ${fontClass}`}>D·ªãch v·ª• n·ªïi b·∫≠t</h2>
          <ul className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {(content.list || 'D·ªãch v·ª• 1\nD·ªãch v·ª• 2\nD·ªãch v·ª• 3').split('\n').map((service, index) => (
              <li key={index} className="bg-white rounded-lg shadow p-4">{service || `D·ªãch v·ª• ${index + 1}`}</li>
            ))}
          </ul>
        </div>
      );
    case 'gallery':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 ${fontClass}`}>H√¨nh ·∫£nh n·ªïi b·∫≠t</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-pink-100 rounded-lg h-24 flex items-center justify-center">H√¨nh 1</div>
            <div className="bg-purple-100 rounded-lg h-24 flex items-center justify-center">H√¨nh 2</div>
            <div className="bg-yellow-100 rounded-lg h-24 flex items-center justify-center">H√¨nh 3</div>
            <div className="bg-fuchsia-100 rounded-lg h-24 flex items-center justify-center">H√¨nh 4</div>
          </div>
        </div>
      );
    case 'blog':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 ${fontClass}`}>Blog m·ªõi nh·∫•t</h2>
          <ul className="space-y-2">
            {(content.list || '5 xu h∆∞·ªõng thi·∫øt k·∫ø web 2024\nC√°ch ch·ªçn m√†u s·∫Øc cho website n·ªØ t√≠nh\nT·ªëi ∆∞u SEO cho website spa/th·ªùi trang').split('\n').map((blog, index) => (
              <li key={index} className={`border-l-4 pl-4 ${index === 0 ? 'border-pink-400' : index === 1 ? 'border-blue-400' : 'border-purple-400'}`}>
                {blog || `Blog ${index + 1}`}
              </li>
            ))}
          </ul>
        </div>
      );
    case 'video':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 ${fontClass}`}>Video n·ªïi b·∫≠t</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="aspect-video bg-gray-200 rounded-lg flex items-center justify-center">Video 1</div>
            <div className="aspect-video bg-gray-200 rounded-lg flex items-center justify-center">Video 2</div>
          </div>
        </div>
      );
    case 'product':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 ${fontClass}`}>S·∫£n ph·∫©m n·ªïi b·∫≠t</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-pink-100 rounded-lg h-24 flex items-center justify-center">S·∫£n ph·∫©m 1</div>
            <div className="bg-purple-100 rounded-lg h-24 flex items-center justify-center">S·∫£n ph·∫©m 2</div>
            <div className="bg-yellow-100 rounded-lg h-24 flex items-center justify-center">S·∫£n ph·∫©m 3</div>
            <div className="bg-fuchsia-100 rounded-lg h-24 flex items-center justify-center">S·∫£n ph·∫©m 4</div>
          </div>
        </div>
      );
    case 'partner':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 ${fontClass}`}>ƒê·ªëi t√°c</h2>
          <div className="flex gap-6 justify-center flex-wrap">
            <div className="w-24 h-12 bg-gray-100 rounded-lg flex items-center justify-center">Logo 1</div>
            <div className="w-24 h-12 bg-gray-100 rounded-lg flex items-center justify-center">Logo 2</div>
            <div className="w-24 h-12 bg-gray-100 rounded-lg flex items-center justify-center">Logo 3</div>
            <div className="w-24 h-12 bg-gray-100 rounded-lg flex items-center justify-center">Logo 4</div>
          </div>
        </div>
      );
    case 'testimonial':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-fuchsia-50`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-500 ${fontClass}`}>Kh√°ch h√†ng n√≥i g√¨</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {(content.list || 'Ng·ªçc Mai - "D·ªãch v·ª• tuy·ªát v·ªùi, giao di·ªán n·ªØ t√≠nh, r·∫•t h√†i l√≤ng!"\nThu H·∫±ng - "Website spa c·ªßa t√¥i ƒë∆∞·ª£c khen r·∫•t nhi·ªÅu nh·ªù ZunaWeb!"').split('\n').map((testimonial, index) => {
              const [name, quote] = testimonial.split(' - ');
              return (
                <div key={index} className="bg-white rounded-lg shadow p-4">
                  <div className="font-semibold text-pink-600 mb-1">{name || `Kh√°ch h√†ng ${index + 1}`}</div>
                  <div className="text-gray-700 italic">{quote || 'Nh·∫≠n x√©t c·ªßa kh√°ch h√†ng'}</div>
                </div>
              );
            })}
          </div>
        </div>
      );
    case 'team':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-purple-600 ${fontClass}`}>ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i</h2>
          <div className="flex gap-6 justify-center flex-wrap">
            {(content.list || 'Linh - Designer\nH√† - Web Dev\nTrang - Support').split('\n').map((member, index) => {
              const [name, role] = member.split(' - ');
              return (
                <div key={index} className="flex flex-col items-center">
                  <div className={`w-16 h-16 rounded-full mb-2 ${index === 0 ? 'bg-pink-200' : index === 1 ? 'bg-purple-200' : 'bg-yellow-200'}`}></div>
                  <div className="font-medium text-gray-800">{name || `Th√†nh vi√™n ${index + 1}`}</div>
                  <div className="text-xs text-gray-500">{role || 'Vai tr√≤'}</div>
                </div>
              );
            })}
          </div>
        </div>
      );
    case 'pricing':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-pink-50`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>B·∫£ng gi√° d·ªãch v·ª•</h2>
          <ul className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {(content.list || 'G√≥i C∆° b·∫£n: 990.000ƒë\nG√≥i N√¢ng cao: 1.990.000ƒë\nG√≥i Doanh nghi·ªáp: Li√™n h·ªá').split('\n').map((price, index) => (
              <li key={index} className="bg-white rounded-lg shadow p-4">{price || `G√≥i ${index + 1}`}</li>
            ))}
          </ul>
        </div>
      );
    case 'faq':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-fuchsia-600 ${fontClass}`}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
          <ul className="space-y-2">
            {(content.list || 'T√¥i c√≥ th·ªÉ ch·ªânh s·ª≠a website sau khi t·∫°o kh√¥ng?\nC√≥ h·ªó tr·ª£ giao di·ªán cho spa/th·ªùi trang n·ªØ kh√¥ng?\nL√†m sao ƒë·ªÉ nh·∫≠n t∆∞ v·∫•n mi·ªÖn ph√≠?').split('\n').map((faq, index) => (
              <li key={index} className="bg-white rounded-lg shadow p-4">{faq || `C√¢u h·ªèi ${index + 1}`}</li>
            ))}
          </ul>
        </div>
      );
    case 'cta':
      return (
        <div className={`py-8 px-4 text-center ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-2 text-pink-600 ${fontClass}`}>{content.title || 'S·∫µn s√†ng s·ªü h·ªØu website?'}</h2>
          <p className={`mb-4 ${fontClass}`}>{content.text || 'G·ª≠i y√™u c·∫ßu ƒë·ªÉ ƒë·ªôi ng≈© ZunaWeb t∆∞ v·∫•n v√† tri·ªÉn khai website th·ª±c t·∫ø cho b·∫°n!'}</p>
          <button className="btn-primary px-8 py-3 text-lg" onClick={() => {}}>G·ª≠i y√™u c·∫ßu t∆∞ v·∫•n</button>
        </div>
      );
    case 'contact':
      return (
        <div className={`py-8 px-4 text-center ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-2 text-primary-600 ${fontClass}`}>Li√™n h·ªá</h2>
          <p className={`mb-2 ${fontClass}`}>{content.text || 'ƒêi·ªÅn th√¥ng tin li√™n h·ªá c·ªßa b·∫°n t·∫°i ƒë√¢y.'}</p>
          <button className="btn-primary" onClick={() => {}}>G·ª≠i y√™u c·∫ßu</button>
        </div>
      );
    case 'navigation':
      return (
        <nav className={`py-4 px-6 mb-4 flex justify-between items-center ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <span className="font-bold text-lg">{content.name || siteInfo.name || 'T√™n website'}</span>
          <ul className="flex gap-6 text-sm font-medium">
            {(content.menu || 'Gi·ªõi thi·ªáu, D·ªãch v·ª•, H√¨nh ·∫£nh, Li√™n h·ªá').split(',').map((item, index) => (
              <li key={index}><a href={`#${item.trim().toLowerCase()}`} className="hover:text-pink-500">{item.trim()}</a></li>
            ))}
          </ul>
        </nav>
      );
    case 'footer':
      return (
        <footer className={`py-6 px-4 mt-8 text-center text-gray-600 text-sm ${radiusClass} ${shadowClass} ${transitionClass} ${fontClass} bg-white`}>
          <div>{content.copyright || `¬© ${new Date().getFullYear()} ${siteInfo.name || 'ZunaWeb'}. All rights reserved.`}</div>
          <div className="mt-2">{content.credit || 'Thi·∫øt k·∫ø b·ªüi ZunaWeb'}</div>
        </footer>
      );
    case 'modern-feature':
      if (styleType !== 'modern') return null;
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-blue-50`}>
          <h2 className="text-2xl font-bold mb-4">T√≠nh nƒÉng n·ªïi b·∫≠t</h2>
          <ul className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <li className="bg-white rounded-lg shadow p-4">T·ªëc ƒë·ªô t·∫£i nhanh</li>
            <li className="bg-white rounded-lg shadow p-4">Thi·∫øt k·∫ø responsive</li>
            <li className="bg-white rounded-lg shadow p-4">B·∫£o m·∫≠t cao</li>
          </ul>
        </div>
      );
    case 'minimal-quote':
      if (styleType !== 'minimal') return null;
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-gray-50 text-center italic`}>
          <blockquote className="text-xl">"S·ª± t·ªëi gi·∫£n l√† ƒë·ªânh cao c·ªßa tinh t·∫ø."</blockquote>
        </div>
      );
    case 'creative-showcase':
      if (styleType !== 'creative') return null;
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-yellow-50`}>
          <h2 className="text-2xl font-bold mb-4">Showcase s√°ng t·∫°o</h2>
          <div className="flex gap-4 flex-wrap justify-center">
            <div className="w-32 h-32 bg-orange-200 rounded-lg flex items-center justify-center">√ù t∆∞·ªüng 1</div>
            <div className="w-32 h-32 bg-pink-200 rounded-lg flex items-center justify-center">√ù t∆∞·ªüng 2</div>
            <div className="w-32 h-32 bg-purple-200 rounded-lg flex items-center justify-center">√ù t∆∞·ªüng 3</div>
          </div>
        </div>
      );
    case 'spa-promotion':
      if (styleType !== 'spa') return null;
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-pink-50 text-center`}>
          <h2 className="text-2xl font-bold mb-4">∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho Spa</h2>
          <div className="text-lg">Gi·∫£m gi√° 30% cho kh√°ch h√†ng m·ªõi trong th√°ng n√†y!</div>
        </div>
      );
    case 'fashion-lookbook':
      if (styleType !== 'fashion') return null;
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-pink-100`}>
          <h2 className="text-2xl font-bold mb-4">Lookbook th·ªùi trang</h2>
          <div className="flex gap-4 flex-wrap justify-center">
            <div className="w-24 h-32 bg-white rounded-lg shadow flex items-center justify-center">Outfit 1</div>
            <div className="w-24 h-32 bg-white rounded-lg shadow flex items-center justify-center">Outfit 2</div>
            <div className="w-24 h-32 bg-white rounded-lg shadow flex items-center justify-center">Outfit 3</div>
          </div>
        </div>
      );
    case 'mom-tips':
      if (styleType !== 'mom') return null;
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-yellow-50`}>
          <h2 className="text-2xl font-bold mb-4">M·∫πo cho m·∫π & b√©</h2>
          <ul className="list-disc pl-6 text-left">
            <li>ChƒÉm s√≥c da cho b√© an to√†n</li>
            <li>Th·ª±c ƒë∆°n dinh d∆∞·ª°ng cho m·∫π</li>
            <li>G·ª£i √Ω ƒë·ªì d√πng c·∫ßn thi·∫øt</li>
          </ul>
        </div>
      );
    case 'social':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>M·∫°ng x√£ h·ªôi</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {(content.list || 'Facebook: https://facebook.com/...\nInstagram: https://instagram.com/...\nYouTube: https://youtube.com/...').split('\n').map((link, index) => (
              <div key={index} className="bg-pink-100 rounded-lg shadow p-4">
                <div className="font-semibold text-pink-600 mb-1">{link || `Li√™n k·∫øt ${index + 1}`}</div>
              </div>
            ))}
          </div>
        </div>
      );
    case 'newsletter':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>ƒêƒÉng k√Ω nh·∫≠n tin</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block font-semibold mb-1">Ti√™u ƒë·ªÅ</label>
              <input className="w-full border rounded px-3 py-2" value={content.title || ''} />
            </div>
            <div>
              <label className="block font-semibold mb-1">M√¥ t·∫£</label>
              <input className="w-full border rounded px-3 py-2" value={content.text || ''} />
            </div>
          </div>
        </div>
      );
    case 'map':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>B·∫£n ƒë·ªì</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block font-semibold mb-1">ƒê·ªãa ch·ªâ</label>
              <input className="w-full border rounded px-3 py-2" value={content.address || ''} />
            </div>
            <div>
              <label className="block font-semibold mb-1">M√¥ t·∫£</label>
              <input className="w-full border rounded px-3 py-2" value={content.text || ''} />
            </div>
          </div>
        </div>
      );
    case 'statistics':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>Th·ªëng k√™</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {(content.list || '1000+ Kh√°ch h√†ng\n50+ D·ª± √°n\n5+ NƒÉm kinh nghi·ªám\n99% H√†i l√≤ng').split('\n').map((stat, index) => (
              <div key={index} className="bg-pink-100 rounded-lg shadow p-4">
                <div className="font-semibold text-pink-600 mb-1">{stat || `Th·ªëng k√™ ${index + 1}`}</div>
              </div>
            ))}
          </div>
        </div>
      );
    case 'awards':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-pink-50`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>Gi·∫£i th∆∞·ªüng</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {(content.list || 'Gi·∫£i th∆∞·ªüng 1 - 2023\nGi·∫£i th∆∞·ªüng 2 - 2022').split('\n').map((award, index) => (
              <div key={index} className="bg-white rounded-lg shadow p-4">
                <div className="font-semibold text-pink-600 mb-1">{award || `Gi·∫£i th∆∞·ªüng ${index + 1}`}</div>
              </div>
            ))}
          </div>
        </div>
      );
    case 'events':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>S·ª± ki·ªán</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {(content.list || 'S·ª± ki·ªán 1 - Ng√†y/Th√°ng\nS·ª± ki·ªán 2 - Ng√†y/Th√°ng').split('\n').map((event, index) => (
              <div key={index} className="bg-pink-100 rounded-lg shadow p-4">
                <div className="font-semibold text-pink-600 mb-1">{event || `S·ª± ki·ªán ${index + 1}`}</div>
              </div>
            ))}
          </div>
        </div>
      );
    case 'portfolio':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-white`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>T√°c ph·∫©m</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {(content.list || 'T√°c ph·∫©m 1 - M√¥ t·∫£\nT√°c ph·∫©m 2 - M√¥ t·∫£').split('\n').map((item, index) => (
              <div key={index} className="bg-pink-100 rounded-lg shadow p-4">
                <div className="font-semibold text-pink-600 mb-1">{item || `T√°c ph·∫©m ${index + 1}`}</div>
              </div>
            ))}
          </div>
        </div>
      );
    case 'reviews':
      return (
        <div className={`py-8 px-4 ${radiusClass} ${shadowClass} ${transitionClass} ${hoverClass} ${fontClass} bg-pink-50`}>
          <h2 className={`text-2xl font-bold mb-4 text-pink-600 ${fontClass}`}>ƒê√°nh gi√°</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {(content.list || 'T√™n - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - Nh·∫≠n x√©t\nT√™n - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - Nh·∫≠n x√©t').split('\n').map((review, index) => {
              const [name, , comment] = review.split(' - ');
              return (
                <div key={index} className="bg-white rounded-lg shadow p-4">
                  <div className="font-semibold text-pink-600 mb-1">{name || `Kh√°ch h√†ng ${index + 1}`}</div>
                  <div className="text-gray-700 italic">{comment || 'Nh·∫≠n x√©t c·ªßa kh√°ch h√†ng'}</div>
                </div>
              );
            })}
          </div>
        </div>
      );
    default:
      return <div>Ch∆∞a h·ªó tr·ª£ render block n√†y.</div>;
  }
};

export default WebsiteBuilder; 